'''
investigate multiplicity of systems. Uses dfs generated by plot_binary_evolution.py
'''
from matplotlib import rc
rc('font',**{'size':9})

import pandas as pd
import numpy
import py_func as pf
import matplotlib.pyplot as pyplot
import matplotlib.gridspec as gridspec
import matplotlib.colors
import os

# use LaTeX fonts in the plot
pyplot.rc('text', usetex=True)
pyplot.rc('font', family='serif')

# create figure
fig = pyplot.figure()

s_x=1.0
s_y=0.8

pc_tex=0.16605 # latex pc in inches
text_width=39.0*pc_tex
column_sep=2.0*pc_tex
# column_width=3.30709 # 84mm in inches
x_len=((text_width/2.0)+(1.5*pc_tex))*s_x
y_len=(x_len)*s_y
print "size: {}x{} inches".format(x_len,y_len)
fig.set_size_inches(x_len,y_len)

gs = gridspec.GridSpec(1,1)
ax1 = pyplot.subplot(gs[0,0])

# Load the dfs
path="/Users/jrobinson/xq1_grav_cloud/binary_stability/orbit_results/orbit_results_plots"

df_plot_all=pd.read_csv("{}/df_plot_100_all.txt".format(path),sep="\t",index_col=0)
df_plot_all_stable=pd.read_csv("{}/df_plot_100_all_stable.txt".format(path),sep="\t",index_col=0)

df_plot_all=df_plot_all[df_plot_all["N_sys"]>1]
df_plot_all_stable=df_plot_all_stable[df_plot_all_stable["N_sys"]>1]


# find the min and max number of particles in each system, to get colour bar ranges
N_sys_all=numpy.array(df_plot_all["N_sys"]).flatten()
N_sys_all_stable=numpy.array(df_plot_all_stable["N_sys"]).flatten()
print "all stable:\n",N_sys_all_stable
print len(N_sys_all_stable)
print len(N_sys_all_stable[~numpy.isnan(N_sys_all_stable)])
print len(N_sys_all_stable[N_sys_all_stable==2])
print N_sys_all_stable[N_sys_all_stable>2]
print len(N_sys_all_stable[N_sys_all_stable>2])

# print df_plot_all_stable[df_plot_all_stable["N_sys"]==1][['run_name','i','j','i_orig','i_largest','N_sys']]
# print df_plot_all_stable[df_plot_all_stable["N_sys"]==2][['run_name','i','j','i_orig','i_largest','N_sys']]
# print df_plot_all_stable[df_plot_all_stable["N_sys"]==3][['run_name','i','j','i_orig','i_largest','N_sys']]
# exit()

# drop nans
N_sys_all=N_sys_all[~numpy.isnan(N_sys_all)]
N_sys_all_stable=N_sys_all_stable[~numpy.isnan(N_sys_all_stable)]

tot_N_sys=numpy.append(N_sys_all_stable,N_sys_all)
# tot_N_sys=tot_N_sys[~numpy.isnan(tot_N_sys)]
# print all_N_sys
N_sys_min=numpy.amin(numpy.unique(tot_N_sys))
N_sys_max=numpy.amax(numpy.unique(tot_N_sys))
print N_sys_min,N_sys_max

# print all runs with multiple systems
print df_plot_all_stable[df_plot_all_stable["N_sys"]>2][['run_name','i_orig','m1(kg)','m2(kg)','a(m)','N_sys']].to_string()
# run_mult=numpy.array(df_plot_all_stable[df_plot_all_stable["N_sys"]>2]['run_name'])
i_mult=numpy.array(df_plot_all_stable[df_plot_all_stable["N_sys"]>2]['i_orig']).astype(int)
dir_mult=numpy.array(df_plot_all_stable[df_plot_all_stable["N_sys"]>2]['run_dir'])
# print list(df_plot_all_stable)
print i_mult,dir_mult
run_mult=[]
for i in range(len(i_mult)):
    d=dir_mult[i].split("/")
    run_mult.append("{}_{}_{}".format(d[-1],d[-2],i_mult[i]))
print run_mult
# exit()

print "{} entries".format(len(df_plot_all_stable))
print "{} nan systems".format(len(df_plot_all_stable[numpy.isnan(df_plot_all_stable["N_sys"])]))
_df_plot_all_stable=df_plot_all_stable[~numpy.isnan(df_plot_all_stable["N_sys"])]
print "{} total systems".format(len(_df_plot_all_stable))
print "{} single systems".format(len(_df_plot_all_stable[_df_plot_all_stable["N_sys"]==2]))
print "{} multiple systems".format(len(_df_plot_all_stable[_df_plot_all_stable["N_sys"]>2]))


# Find histogram
bin_array=numpy.arange(N_sys_min,N_sys_max+1,1) # one bin for each integer number of particles
a1=0.5
a2=a1

hist_all,bins_all=numpy.histogram(N_sys_all,bins=bin_array)
center_all = (bins_all[:-1] + bins_all[1:]) / 2
width_all = numpy.diff(bins_all)

hist_all_stable,bins_all_stable=numpy.histogram(N_sys_all_stable,bins=bin_array)
center_all_stable = (bins_all_stable[:-1] + bins_all_stable[1:]) / 2
width_all_stable = numpy.diff(bins_all_stable)

#log 10 y axis
print pf.pyplot_colours[0]
print matplotlib.colors.to_rgba(pf.pyplot_colours[0])
print matplotlib.colors.to_rgba("k")
c0=matplotlib.colors.to_rgba(pf.pyplot_colours[0],a1)
c1=matplotlib.colors.to_rgba(pf.pyplot_colours[1],a1)
ck=matplotlib.colors.to_rgba("k",0.5)

ax1.bar(center_all, numpy.log10(hist_all), color=c0, align='center',zorder=1,edgecolor=ck,linewidth=0,
width=width_all)#,label="pre evolution, total systems = {}".format(len(N_sys_all)))
ax1.bar(center_all_stable, numpy.log10(hist_all_stable), color=c1, align='center',zorder=1,edgecolor=ck,linewidth=0,
width=width_all_stable)#,label="post evolution, total systems = {}".format(len(N_sys_all_stable)))

# Use for legend labels
ax1.bar(0, 0, color=c0, align='center',zorder=1,edgecolor=ck,linewidth=1,
width=0,label="pre evolution, total systems = {}".format(len(N_sys_all)))
ax1.bar(0, 0, color=c1, align='center',zorder=1,edgecolor=ck,linewidth=1,
width=0,label="post evolution, total systems = {}".format(len(N_sys_all_stable)))

# Add -ve values to give height to log(1)=0 bars
y_shift=-0.1
mask1=(hist_all>0)
height1=numpy.zeros(len(hist_all))
height1[mask1]=y_shift
mask2=(hist_all_stable>0)
height2=numpy.zeros(len(hist_all_stable))
height2[mask2]=y_shift

print height1
ax1.bar(center_all, height1, color=c0, align='center',zorder=1,edgecolor=ck,linewidth=0,
width=width_all)
ax1.bar(center_all_stable, height2, color=c1, align='center',zorder=1,edgecolor=ck,linewidth=0,
width=width_all_stable)

# add lines for hist1
space=numpy.unique(width_all)
x_lines=center_all-(space/2)
x_lines=numpy.append(x_lines,x_lines[-1]+space)

edge_heights=numpy.zeros(len(x_lines))+y_shift
edge_heights[0]=numpy.log10(hist_all[0])
for i in range(1,len(x_lines)-1):
    # edge_heights[i]=numpy.log10(hist_all[i-1])
    if hist_all[i-1]>hist_all[i]:
        edge_heights[i]=numpy.log10(hist_all[i-1])
    else:
        edge_heights[i]=numpy.log10(hist_all[i])
edge_heights[-1]=edge_heights[-2]

ax1.vlines(x_lines,y_shift,edge_heights,color=ck,linewidth=1)
ax1.hlines(numpy.log10(hist_all[mask1]),x_lines[:-1][mask1],x_lines[:-1][mask1]+space,color=ck,linewidth=1)
ax1.hlines([y_shift]*len(mask1),x_lines[:-1][mask1],x_lines[:-1][mask1]+space,color=ck,linewidth=1)

# add lines for hist2
space=numpy.unique(width_all_stable)
x_lines=center_all_stable-(space/2)
x_lines=numpy.append(x_lines,x_lines[-1]+space)

edge_heights=numpy.zeros(len(x_lines))+y_shift
edge_heights[0]=numpy.log10(hist_all_stable[0])
for i in range(1,len(x_lines)-1):
    # edge_heights[i]=numpy.log10(hist_all[i-1])
    if hist_all_stable[i-1]>hist_all_stable[i]:
        edge_heights[i]=numpy.log10(hist_all_stable[i-1])
    else:
        edge_heights[i]=numpy.log10(hist_all_stable[i])
edge_heights[-1]=edge_heights[-2]

ax1.vlines(x_lines,y_shift,edge_heights,color=ck,linewidth=1)
ax1.hlines(numpy.log10(hist_all_stable[mask2]),x_lines[:-1][mask2],x_lines[:-1][mask2]+space,color=ck,linewidth=1)
# ax1.hlines([y_shift]*len(mask2),x_lines[:-1][mask2],x_lines[:-1][mask2]+space,color=ck,linewidth=1)

# ax1.axhline(0,color=ck,linewidth=1,zorder=0)

# set ax limits
# ax1.set_ylim(-0.1, 0.1+numpy.log10(numpy.amax(numpy.append(hist_all,hist_all_stable))))

# ax1.set_ylim(0.0, 0.1+numpy.log10(numpy.amax(numpy.append(hist_all,hist_all_stable))))
# ax1.set_xlim(0.0, 0.1+(numpy.amax(numpy.append(center_all,center_all_stable)))+1)
# Set axis labels
ax1.set_xlabel('$\\mathrm{{number~of~particles~in~bound~system}}$')
ax1.set_ylabel("$\\log(n)$")

ax1.legend(loc='upper right',prop={'size': 6})
# ax1.legend(loc='upper right')

#save the figure
script_name=os.path.basename(__file__).split('.')[0]
picname="{}.png".format(script_name)
print "save {}".format(picname)
pyplot.savefig(picname,bbox_inches='tight',pad_inches=0.0)

picname="{}.pdf".format(script_name)
print "save {}".format(picname)
pyplot.savefig(picname,bbox_inches='tight',pad_inches=0.0)

pyplot.show()
# pyplot.close()
