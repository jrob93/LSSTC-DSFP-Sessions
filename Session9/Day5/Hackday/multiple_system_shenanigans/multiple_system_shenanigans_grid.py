'''
investigate multiplicity of systems. Uses dfs generated by plot_binary_evolution.py
'''
from matplotlib import rc
rc('font',**{'size':9})

import pandas as pd
import numpy
import py_func as pf
import matplotlib.pyplot as pyplot
import matplotlib.gridspec as gridspec
import matplotlib.colors
import os
import glob
import networkx as nx

graph_plot=0
orb_plot=1

def cm_to_inches(x):
    x*=0.393701
    return x

# Load the dfs
path="/Users/jrobinson/xq1_grav_cloud/binary_stability/orbit_results/orbit_results_plots"
dat_path="/Users/jrobinson/cloud_runs_data/data/jakita_raid2/jer/grav_cloud"
restart_path="/Users/jrobinson/xq1_grav_cloud/binary_stability/cloud_runs_helio/restart_dirs_N100_f1"

df_plot_all=pd.read_csv("{}/df_plot_100_all.txt".format(path),sep="\t",index_col=0)
df_plot_all_stable=pd.read_csv("{}/df_plot_100_all_stable.txt".format(path),sep="\t",index_col=0)

# df_plot_all=df_plot_all[df_plot_all["N_sys"]>1]
df_plot_all_stable=df_plot_all_stable[df_plot_all_stable["N_sys"]>1]

# print df_plot_all
print df_plot_all_stable
print numpy.unique(df_plot_all_stable['run']),len(numpy.unique(df_plot_all_stable['run']))
print len(df_plot_all_stable)

x_fig_len=6
y_fig_len=6

# create figure
fig = pyplot.figure()
gs = gridspec.GridSpec(x_fig_len,y_fig_len)
y_count=0
x_count=0

fig.set_size_inches(cm_to_inches(15),cm_to_inches(15))

# multiple systems
N_mult=[3,4]
for N in N_mult:
    df_mult=df_plot_all_stable[df_plot_all_stable['N_sys']==N]
    print df_mult[['run','R_eq(m)','f','X','i_orig','m1(kg)','m2(kg)','N_sys']]

    # load the collision file
    for i in range(len(df_mult)):

        if x_count>=6:
            x_count-=6
            y_count+=1

        print i,x_count,y_count
        a=pyplot.subplot(gs[x_count,y_count])
        a.set_aspect("equal")
        x_count+=1
        # continue

        r_split=df_mult.iloc[i]['run_dir'].split("/")
        run=r_split[-1]
        set=r_split[-2]
        pri=df_mult.iloc[i]['i_orig']
        print set,run,pri

        orb_file="{}/{}_{}_{}/{}_{}_{}_orbit_search_faster_hel.txt".format(restart_path,run,set,int(pri),run,set,int(pri))
        df_orb=pf.load_orb_file(orb_file)
        # print df_orb
        df=df_orb[df_orb['t(s)']==numpy.amax(df_orb['t(s)'])]

        #laod run params
        data_path="{}/{}/{}".format(dat_path,set,run)
        files=next(os.walk(data_path))[2] #retrieve the files in the run directory
        files.sort() #ensure that the files are always sorted the same?
        rp_files = [ fi for fi in files if fi.endswith(".txt") and fi.startswith("run_params") ]
        df_rp=pf.load_run_params("{}/{}".format(data_path,rp_files[-1]))

        # load last restarted data file
        restart_dir="{}/{}_{}_{}".format(restart_path,run,set,int(pri))
        list_of_files = glob.glob("{}/*".format(restart_dir))
        dat_file_list=[f for f in list_of_files if "dat" in f and f.endswith(".txt")]
        dat_file_list.sort()
        latest_dat_file = dat_file_list[-1]

        df=pf.create_df_tot(run,df,df_rp,latest_dat_file) # use original df_rp
        df=pf.binary_selector(df)
        print df[['run','i','j','m1(kg)','m2(kg)','m2/m1']],len(df)

        # Plot the orbit
        marker_size=50

        pri_pos=numpy.array(df[['x1(m)','y1(m)','y1(m)']])
        sec_pos=numpy.array(df[['x2(m)','y2(m)','y2(m)']])
        m_pri=numpy.array(df['m1(kg)'])
        m_sec=numpy.array(df['m2(kg)'])
        pri_list=numpy.array(df['i']).astype(int)
        sec_list=numpy.array(df['j']).astype(int)

        for j in range(len(df)):

            orb=numpy.array(df.iloc[j][['a(m)','e','I(rad)','OMEGA(rad)','omega(rad)']])
            pos_orb=pf.planet_orbit(orb,100)

            # Marker size is set relative to the main primary
            m_size=marker_size*((m_pri[j])/(m_pri[0]))**(1.0/2.0)
            print m_size
            a.scatter(pri_pos[j,0]-pri_pos[0,0],pri_pos[j,1]-pri_pos[0,1],s=m_size,zorder=1)

            m_size=marker_size*((m_sec[j])/(m_pri[0]))**(1.0/2.0)
            print m_size
            a.scatter(sec_pos[j,0]-pri_pos[0,0],sec_pos[j,1]-pri_pos[0,1],s=m_size,zorder=2)
            a.plot((pos_orb[:,0]+pri_pos[j,0])-pri_pos[0,0],(pos_orb[:,1]+pri_pos[j,1])-pri_pos[0,1],zorder=0)

        # Reset the limits to be square
        xlims=a.get_xlim()
        ylims=a.get_ylim()
        xdiff=numpy.absolute(xlims[1]-xlims[0])
        ydiff=numpy.absolute(ylims[1]-ylims[0])
        if xdiff>ydiff:
            ydiff_mid=ylims[0]+(ydiff/2.0)
            a.set_ylim(ydiff_mid-(xdiff/2.0),ydiff_mid+(xdiff/2.0))
        else:
            xdiff_mid=xlims[0]+(xdiff/2.0)
            a.set_xlim(xdiff_mid-(ydiff/2.0),xdiff_mid+(ydiff/2.0))

#save the figure
script_name=os.path.basename(__file__).split('.')[0]
picname="{}.png".format(script_name)
print "save {}".format(picname)
pyplot.savefig(picname,bbox_inches='tight',pad_inches=0.0)

script_name=os.path.basename(__file__).split('.')[0]
picname="{}.pdf".format(script_name)
print "save {}".format(picname)
pyplot.savefig(picname,bbox_inches='tight',pad_inches=0.0)

pyplot.show()
# pyplot.close()
